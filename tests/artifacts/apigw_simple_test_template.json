{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Resources": {
        "thingsApiResource": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "PathPart": "things",
                "RestApiId": {
                    "Ref": "worldApi"
                },
                "ParentId": {
                    "Fn::GetAtt": [
                        "worldApi",
                        "RootResourceId"
                    ]
                }
            }
        },
        "worldApiDeployment": {
            "DependsOn": [
                "worldApi",
                "thingsApiResource",
                "thingsOptions",
                "thingsGet"
            ],
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
                "RestApiId": {
                    "Ref": "worldApi"
                },
                "StageName": "v1"
            }
        },
        "dummyLambdaLambdaPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:*",
                "Principal": "apigateway.amazonaws.com",
                "FunctionName": {
                    "Fn::GetAtt": [
                        "dummyLambdaLambda",
                        "Arn"
                    ]
                }
            }
        },
        "thingsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "MethodResponses": [
                    {
                        "ResponseModels": {
                            "application/json": "Empty"
                        },
                        "StatusCode": "200",
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Headers": false,
                            "method.response.header.Access-Control-Allow-Methods": false,
                            "method.response.header.Access-Control-Allow-Origin": false
                        }
                    }
                ],
                "HttpMethod": "OPTIONS",
                "ResourceId": {
                    "Ref": "thingsApiResource"
                },
                "Integration": {
                    "RequestTemplates": {
                        "application/json": "{\"statusCode\": 200}"
                    },
                    "PassthroughBehavior": "WHEN_NO_MATCH",
                    "IntegrationResponses": [
                        {
                            "ResponseTemplates": {
                                "application/json": ""
                            },
                            "StatusCode": "200",
                            "ResponseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                                "method.response.header.Access-Control-Allow-Methods": "'DELETE,GET,HEAD,POST,PUT,OPTIONS,TRACE'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        }
                    ],
                    "Type": "MOCK",
                    "IntegrationHttpMethod": "POST"
                },
                "RestApiId": {
                    "Ref": "worldApi"
                },
                "AuthorizationType": "NONE"
            }
        },
        "worldApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
                "Name": "world"
            }
        },
        "dummyLambdaLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "MemorySize": "1024",
                "Runtime": "nodejs4.3",
                "Role": {
                    "Fn::GetAtt": [
                        "lambdaBasicExecutionIAMRole",
                        "Arn"
                    ]
                },
                "FunctionName": "testApp_dummyLambda",
                "Code": {
                    "S3Key": "lambda.zip",
                    "S3Bucket": "testApp"
                },
                "Handler": "index.handler",
                "Timeout": "30"
            }
        },
        "lambdaBasicExecutionIAMRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": {
                        "Effect": "Allow",
                        "Action": "sts:AssumeRole",
                        "Principal": {
                            "Service": "lambda.amazonaws.com"
                        }
                    },
                    "Version": "2012-10-17"
                },
                "Path": "/",
                "RoleName": "testApp_LambdaBasicExecutionRole",
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": {
                                "Effect": "Allow",
                                "Action": [
                                    "logs:CreateLogGroup",
                                    "logs:DescribeLogGroups",
                                    "logs:CreateLogStream",
                                    "logs:DescribeLogStreams",
                                    "logs:PutLogEvents",
                                    "s3:GetObject",
                                    "s3:PutObject",
                                    "s3:ListMultipartUploadParts",
                                    "s3:AbortMultipartUpload",
                                    "dynamodb:Scan",
                                    "dynamodb:Query",
                                    "dynamodb:GetItem",
                                    "dynamodb:PutItem",
                                    "dynamodb:DeleteItem",
                                    "dynamodb:GetRecords",
                                    "dynamodb:GetShardIterator",
                                    "dynamodb:DescribeStream",
                                    "dynamodb:ListStreams",
                                    "cognito-idp:CreateUserPool",
                                    "cognito-idp:DeleteUserPool",
                                    "cognito-idp:CreateUserPoolClient",
                                    "cognito-idp:CreateUserPoolClient",
                                    "cognito-identity:CreateIdentityPool",
                                    "cognito-identity:DeleteIdentityPool"
                                ],
                                "Resource": "*"
                            },
                            "Version": "2012-10-17"
                        },
                        "PolicyName": "testApp_LambdaExecutionPolicy"
                    }
                ]
            }
        },
        "thingsGet": {
            "DependsOn": [
                "dummyLambdaLambda",
                "dummyLambdaLambdaPermission"
            ],
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "MethodResponses": [
                    {
                        "StatusCode": "200",
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Headers": false,
                            "method.response.header.Access-Control-Allow-Methods": false,
                            "method.response.header.Access-Control-Allow-Origin": false
                        }
                    },
                    {
                        "StatusCode": "400",
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Headers": false,
                            "method.response.header.Access-Control-Allow-Methods": false,
                            "method.response.header.Access-Control-Allow-Origin": false
                        }
                    },
                    {
                        "StatusCode": "404",
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Headers": false,
                            "method.response.header.Access-Control-Allow-Methods": false,
                            "method.response.header.Access-Control-Allow-Origin": false
                        }
                    },
                    {
                        "StatusCode": "500",
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Headers": false,
                            "method.response.header.Access-Control-Allow-Methods": false,
                            "method.response.header.Access-Control-Allow-Origin": false
                        }
                    }
                ],
                "HttpMethod": "GET",
                "ResourceId": {
                    "Ref": "thingsApiResource"
                },
                "Integration": {
                    "RequestTemplates": {
                        "application/json": "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n##  This template will pass through all parameters including path, querystring, header, stage variables, and context through to the integration endpoint via the body/payload\n#set($allParams = $input.params())\n{\n\"body-json\" : $input.json('$'),\n\"params\" : {\n#foreach($type in $allParams.keySet())\n    #set($params = $allParams.get($type))\n\"$type\" : {\n    #foreach($paramName in $params.keySet())\n    \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\n        #if($foreach.hasNext),#end\n    #end\n}\n    #if($foreach.hasNext),#end\n#end\n},\n\"stage-variables\" : {\n#foreach($key in $stageVariables.keySet())\n\"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n    #if($foreach.hasNext),#end\n#end\n},\n\"context\" : {\n    \"account-id\" : \"$context.identity.accountId\",\n    \"api-id\" : \"$context.apiId\",\n    \"api-key\" : \"$context.identity.apiKey\",\n    \"authorizer-principal-id\" : \"$context.authorizer.principalId\",\n    \"caller\" : \"$context.identity.caller\",\n    \"cognito-authentication-provider\" : \"$context.identity.cognitoAuthenticationProvider\",\n    \"cognito-authentication-type\" : \"$context.identity.cognitoAuthenticationType\",\n    \"cognito-identity-id\" : \"$context.identity.cognitoIdentityId\",\n    \"cognito-identity-pool-id\" : \"$context.identity.cognitoIdentityPoolId\",\n    \"http-method\" : \"$context.httpMethod\",\n    \"stage\" : \"$context.stage\",\n    \"source-ip\" : \"$context.identity.sourceIp\",\n    \"user\" : \"$context.identity.user\",\n    \"user-agent\" : \"$context.identity.userAgent\",\n    \"user-arn\" : \"$context.identity.userArn\",\n    \"request-id\" : \"$context.requestId\",\n    \"resource-id\" : \"$context.resourceId\",\n    \"resource-path\" : \"$context.resourcePath\"\n    }\n}\n"
                    },
                    "PassthroughBehavior": "WHEN_NO_TEMPLATES",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:aws:apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "dummyLambdaLambda",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    },
                    "IntegrationResponses": [
                        {
                            "ResponseTemplates": {
                                "application/json": "$input.json('$')\n"
                            },
                            "StatusCode": "200",
                            "ResponseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'DELETE,GET,HEAD,POST,PUT,OPTIONS,TRACE'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        {
                            "SelectionPattern": "^\\[400\\].*",
                            "ResponseTemplates": {
                                "application/json": "{\"message\": $input.json('$.errorMessage')}\n"
                            },
                            "StatusCode": "400",
                            "ResponseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'DELETE,GET,HEAD,POST,PUT,OPTIONS,TRACE'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        {
                            "SelectionPattern": "^\\[404\\].*",
                            "ResponseTemplates": {
                                "application/json": "{\"message\": $input.json('$.errorMessage')}\n"
                            },
                            "StatusCode": "404",
                            "ResponseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'DELETE,GET,HEAD,POST,PUT,OPTIONS,TRACE'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        {
                            "SelectionPattern": "^\\[500\\].*",
                            "ResponseTemplates": {
                                "application/json": "{\"message\": $input.json('$.errorMessage')}\n"
                            },
                            "StatusCode": "500",
                            "ResponseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'",
                                "method.response.header.Access-Control-Allow-Methods": "'DELETE,GET,HEAD,POST,PUT,OPTIONS,TRACE'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        }
                    ],
                    "Type": "AWS",
                    "IntegrationHttpMethod": "POST"
                },
                "RestApiId": {
                    "Ref": "worldApi"
                },
                "AuthorizationType": "NONE"
            }
        }
    },
    "Outputs": {
        "worldApiURL": {
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "https://",
                        {
                            "Ref": "worldApi"
                        },
                        ".execute-api.us-east-1.amazonaws.com/v1"
                    ]
                ]
            },
            "Description": "RestApi URL"
        }
    },
    "Description": "Example"
}